function(target_compile_shader TARGET_NAME)

    set(oneValueArgs NAME NAMESPACE INPUT OUTPUT WORKING_DIRECTORY STAGE ENTRYPOINT LANGUAGE)

    # Ensure The Shader Compiler executable is built before the target
    add_dependencies(${TARGET_NAME} @CORAL_SHADER_COMPILER_HEADLESS_TARGET_NAME@)

    cmake_parse_arguments(PARSE_ARGV 0 arg "" "${oneValueArgs}" "" )

    # Set the GENERATED property for the output file so that CMake won't complain if the file is missing during generation time
    set_source_files_properties(${arg_OUTPUT} PROPERTIES GENERATED true)

    # Add the file to the target
    target_sources(${TARGET_NAME} 
        PRIVATE
            ${arg_INPUT}
    )

    # Prevent Visual Studio from trying to build the HLSL shader source
    set_property(SOURCE ${arg_INPUT} PROPERTY VS_SETTINGS "ExcludedFromBuild=true")

    add_custom_command(TARGET ${TARGET_NAME} PRE_BUILD
        COMMAND "@CORAL_SHADER_COMPILER_HEADLESS_EXECUTABLE@"
        -n "${arg_NAME}"
        --namespace "${arg_NAMESPACE}"
        -o "${arg_OUTPUT}"
        -i "${arg_INPUT}"
        -s ${arg_STAGE}
        -e ${arg_ENTRYPOINT}
        -l ${arg_LANGUAGE}
        DEPENDS "${arg_INPUT}" 
        WORKING_DIRECTORY ${arg_WORKING_DIRECTORY}
    )

    message(STATUS "Added shader '${arg_NAME}' to compile list ('${arg_OUTPUT}')")
endfunction(target_compile_shader)

